package de.borissov;

import javax.sound.midi.*;

public class MidiZwei
{

    static int [] notes = {79,79,81,79,81,83,81,79,78,76,74};


    public static void main(String[] args) {

        //transpose(4);
        playForward();
        //playForplayBackward();

    }


    public static void playForward() {

        try {

            Synthesizer midiSynth = MidiSystem.getSynthesizer();
            midiSynth.open();

            Instrument[] instr = midiSynth.getDefaultSoundbank().getInstruments();
            MidiChannel[] mChannels = midiSynth.getChannels();

            midiSynth.loadInstrument(instr[0]);

            for(int i = 0; i < notes.length; i++)
            {

                mChannels[0].noteOn(notes[i], 100);
                try { Thread.sleep(1000);
                } catch( InterruptedException e ) {
                    e.printStackTrace();
                }
                mChannels[0].noteOff(notes[i]);
            }

        } catch (MidiUnavailableException e) {
            e.printStackTrace();
        }


    }

    public static void playForplayBackward() {

        try {

            Synthesizer midiSynth = MidiSystem.getSynthesizer();
            midiSynth.open();

            Instrument[] instr = midiSynth.getDefaultSoundbank().getInstruments();
            MidiChannel[] mChannels = midiSynth.getChannels();

            midiSynth.loadInstrument(instr[0]);

            for(int i = notes.length - 1; i >= 0; i--)
            {

                mChannels[0].noteOn(notes[i], 100);
                try { Thread.sleep(1000);
                } catch( InterruptedException e ) {
                    e.printStackTrace();
                }
                mChannels[0].noteOff(notes[i]);
            }

        } catch (MidiUnavailableException e) {
            e.printStackTrace();
        }


    }

    public static void transpose(int offSet) {

        try {

            Synthesizer midiSynth = MidiSystem.getSynthesizer();
            midiSynth.open();

            Instrument[] instr = midiSynth.getDefaultSoundbank().getInstruments();
            MidiChannel[] mChannels = midiSynth.getChannels();

            midiSynth.loadInstrument(instr[0]);

            for(int i = 0; i < notes.length; i++)
            {


                mChannels[0].noteOn(notes[i + offSet], 100);
                try { Thread.sleep(1000);
                } catch( InterruptedException e ) {
                    e.printStackTrace();
                }
                mChannels[0].noteOff(notes[i]);
            }

        } catch (MidiUnavailableException e) {
            e.printStackTrace();
        }


    }

}

